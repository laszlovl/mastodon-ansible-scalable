map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

upstream backend {
    {% for host in groups['mastodon_web'] %}
    # because mastodon-web and -streaming can only bind to a single IP
    server {{ host if (host != ansible_facts['nodename']) else wireguard_ip }}:3000 fail_timeout=0;
    {% endfor %}
}

upstream streaming {
    {% for host in groups['mastodon_web'] %}
    server {{ host if (host != ansible_facts['nodename']) else wireguard_ip }}:4000 fail_timeout=0;
    {% endfor %}
}

proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=CACHE:10m inactive=7d max_size=1g;

server {
  listen 80;
  listen [::]:80;
  server_name {{ mastodon_app_domain }};
  
  include letsencrypt.conf;
  
  root /home/mastodon/live/public;
  
  location / {
    return 301 https://$host$request_uri;
  }
}


server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name {{ mastodon_app_domain }};

  ssl_certificate /etc/letsencrypt/live/{{ mastodon_app_domain }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ mastodon_app_domain }}/privkey.pem;

  keepalive_timeout    70;
  sendfile             on;
  client_max_body_size 80m;

  root /home/mastodon/live/public;

  location / {
    try_files $uri @proxy;
  }

  location ^~ /api/v1/streaming {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Proxy "";

    proxy_pass http://streaming;
    proxy_buffering off;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";

    tcp_nodelay on;
  }

  location @proxy {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Proxy "";
    proxy_pass_header Server;

    proxy_pass http://backend;
    proxy_buffering on;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    proxy_cache CACHE;
    proxy_cache_valid 200 7d;
    proxy_cache_valid 410 24h;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

    tcp_nodelay on;
  }

  error_page 404 500 501 502 503 504 /500.html;
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name assets.{{ mastodon_app_domain }};
  
  ssl_certificate /etc/letsencrypt/live/{{ mastodon_app_domain }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ mastodon_app_domain }}/privkey.pem;

  root /home/mastodon/live/public;
  
  add_header Access-Control-Allow-Origin *;
  add_header Cache-Control "public, max-age=604800, must-revalidate";
  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
  
  try_files $uri =404;
  
  log_not_found off;
  access_log off;

  open_file_cache max=100;
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name files.{{ mastodon_app_domain }};
  
  ssl_certificate /etc/letsencrypt/live/{{ mastodon_app_domain }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ mastodon_app_domain }}/privkey.pem;
  
  add_header Access-Control-Allow-Origin *;
  add_header Cache-Control "public, max-age=604800, must-revalidate";
  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
  expires 1y;
  
  log_not_found off;
  access_log off;

  {% if mastodon_app_s3_hostname is defined %}
  try_files $uri @s3;
  
  set $s3_backend 'https://{{ mastodon_app_s3_bucket }}.{{ mastodon_app_s3_hostname }}';
  
  location @s3 {
    limit_except GET {
      deny all;
    }

    proxy_set_header Host {{ mastodon_app_s3_bucket }}.{{ mastodon_app_s3_hostname }};
    proxy_set_header Connection '';
    proxy_set_header Authorization '';
    proxy_hide_header Set-Cookie;
    proxy_hide_header 'Access-Control-Allow-Origin';
    proxy_hide_header 'Access-Control-Allow-Methods';
    proxy_hide_header 'Access-Control-Allow-Headers';
    proxy_hide_header x-amz-id-2;
    proxy_hide_header x-amz-request-id;
    proxy_hide_header x-amz-meta-server-side-encryption;
    proxy_hide_header x-amz-server-side-encryption;
    proxy_hide_header x-amz-bucket-region;
    proxy_hide_header x-amzn-requestid;
    proxy_ignore_headers Set-Cookie;
    
    proxy_pass $s3_backend$uri;
    proxy_ssl_server_name on;
    proxy_intercept_errors off;

    proxy_cache CACHE;
    proxy_cache_valid 200 48h;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_lock on;
  }

  {% else %}
  root /mnt/files/mastodon/{{ mastodon_app_domain }};
    
  try_files $uri =404;
  
  open_file_cache max=10000;
  {% endif %}
}
